---
version: "3.8"

services:
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    ports:
      - 32400:32400
      - 1900:1900/udp
      - 3005:3005
      - 5454:5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    volumes:
      - ${DATA_PATH}/config/plex:/config
      - ${DATA_PATH}/library/tv:/tv
      - ${DATA_PATH}/library/movies:/movies
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:32400/web/index.html
      interval: 10s
      timeout: 5s
      retries: 5

  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - ${DATA_PATH}/config/sonarr:/config
      - ${DATA_PATH}/library/tv:/tv
      - ${DATA_PATH}/downloads:/downloads
    ports:
      - 8989:8989
    depends_on:
      jackett:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:8989
      interval: 10s
      timeout: 5s
      retries: 5

  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - ${DATA_PATH}/config/radarr:/config
      - ${DATA_PATH}/library/movies:/movies
      - ${DATA_PATH}/downloads:/downloads
    ports:
      - 7878:7878
    depends_on:
      jackett:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:7878
      interval: 10s
      timeout: 5s
      retries: 5

  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
      - AUTO_UPDATE=true
    volumes:
      - ${DATA_PATH}/config/jackett:/config
      - ${DATA_PATH}/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:9117
      interval: 10s
      timeout: 5s
      retries: 5

  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Jerusalem
    volumes:
      - ${DATA_PATH}/config/transmission:/config
      - ${DATA_PATH}/downloads:/downloads
      - ${DATA_PATH}/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:9091/transmission/web/
      interval: 10s
      timeout: 5s
      retries: 5

  homeassistant:
    container_name: homeassistant
    image: homeassistant/raspberrypi4-homeassistant:stable
    volumes:
      - ${DATA_PATH}/config/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    ports:
      - 8123:8123 
    healthcheck:
      test: curl -f http://localhost:8123/
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    image: traefik:v2.4
    container_name: traefik
    volumes:
      - ./traefik.toml:/etc/traefik/traefik.toml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    labels:
      traefik.http.routers.dash.rule: Host(`dash.localhost`)
      traefik.http.routers.dash.service: api@internal

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 8000:8000
      - 9000:9000

  agent:
    image: portainer/agent
    container_name: portainer_agent
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/dockers/volumes
    ports:
      - 9001:9001

  netdata:
    image: netdata/netdata
    container_name: netdata
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    ports:
      - 19999:19999
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_PTRACE

  telegram-bot:
    container_name: telegram-bot
    build:
      context: .
      dockerfile: Dockerfile.telegram-bot
    environment: 
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - SONARR_URL=${SONARR_URL}
      - SONARR_TOKEN=${SONARR_TOKEN}
      - RADARR_TOKEN=${RADARR_TOKEN}
    ports:
      - 3000:3000

volumes:
        portainer_data:
        netdataconfig:
        netdatalib:
        netdatacache:
